package com.bingo.riding.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.bingo.riding.dao.ChatMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CHAT_MESSAGE.
*/
public class ChatMessageDao extends AbstractDao<ChatMessage, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE";

    /**
     * Properties of entity ChatMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsRead = new Property(1, boolean.class, "isRead", false, "IS_READ");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property ClientId = new Property(3, String.class, "clientId", false, "CLIENT_ID");
        public final static Property ConversationId = new Property(4, String.class, "conversationId", false, "CONVERSATION_ID");
        public final static Property MessageId = new Property(5, String.class, "messageId", false, "MESSAGE_ID");
        public final static Property Timestamp = new Property(6, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property ReceiptTimestamp = new Property(7, Long.class, "receiptTimestamp", false, "RECEIPT_TIMESTAMP");
        public final static Property IsSendByUser = new Property(8, boolean.class, "isSendByUser", false, "IS_SEND_BY_USER");
    };


    public ChatMessageDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CHAT_MESSAGE' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'IS_READ' INTEGER NOT NULL ," + // 1: isRead
                "'CONTENT' TEXT NOT NULL ," + // 2: content
                "'CLIENT_ID' TEXT NOT NULL ," + // 3: clientId
                "'CONVERSATION_ID' TEXT NOT NULL ," + // 4: conversationId
                "'MESSAGE_ID' TEXT NOT NULL ," + // 5: messageId
                "'TIMESTAMP' INTEGER NOT NULL ," + // 6: timestamp
                "'RECEIPT_TIMESTAMP' INTEGER," + // 7: receiptTimestamp
                "'IS_SEND_BY_USER' INTEGER NOT NULL );"); // 8: isSendByUser
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CHAT_MESSAGE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ChatMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsRead() ? 1l: 0l);
        stmt.bindString(3, entity.getContent());
        stmt.bindString(4, entity.getClientId());
        stmt.bindString(5, entity.getConversationId());
        stmt.bindString(6, entity.getMessageId());
        stmt.bindLong(7, entity.getTimestamp());
 
        Long receiptTimestamp = entity.getReceiptTimestamp();
        if (receiptTimestamp != null) {
            stmt.bindLong(8, receiptTimestamp);
        }
        stmt.bindLong(9, entity.getIsSendByUser() ? 1l: 0l);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ChatMessage readEntity(Cursor cursor, int offset) {
        ChatMessage entity = new ChatMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isRead
            cursor.getString(offset + 2), // content
            cursor.getString(offset + 3), // clientId
            cursor.getString(offset + 4), // conversationId
            cursor.getString(offset + 5), // messageId
            cursor.getLong(offset + 6), // timestamp
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // receiptTimestamp
            cursor.getShort(offset + 8) != 0 // isSendByUser
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ChatMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsRead(cursor.getShort(offset + 1) != 0);
        entity.setContent(cursor.getString(offset + 2));
        entity.setClientId(cursor.getString(offset + 3));
        entity.setConversationId(cursor.getString(offset + 4));
        entity.setMessageId(cursor.getString(offset + 5));
        entity.setTimestamp(cursor.getLong(offset + 6));
        entity.setReceiptTimestamp(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setIsSendByUser(cursor.getShort(offset + 8) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ChatMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ChatMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
