package com.bingo.riding.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.bingo.riding.dao.Conversation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONVERSATION.
*/
public class ConversationDao extends AbstractDao<Conversation, Long> {

    public static final String TABLENAME = "CONVERSATION";

    /**
     * Properties of entity Conversation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ConversationId = new Property(1, String.class, "conversationId", false, "CONVERSATION_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Members = new Property(3, String.class, "members", false, "MEMBERS");
        public final static Property Creator = new Property(4, String.class, "creator", false, "CREATOR");
        public final static Property Attributes = new Property(5, String.class, "attributes", false, "ATTRIBUTES");
        public final static Property LastMessageAt = new Property(6, String.class, "lastMessageAt", false, "LAST_MESSAGE_AT");
    };


    public ConversationDao(DaoConfig config) {
        super(config);
    }
    
    public ConversationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONVERSATION' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CONVERSATION_ID' TEXT UNIQUE ," + // 1: conversationId
                "'NAME' TEXT," + // 2: name
                "'MEMBERS' TEXT," + // 3: members
                "'CREATOR' TEXT," + // 4: creator
                "'ATTRIBUTES' TEXT," + // 5: attributes
                "'LAST_MESSAGE_AT' TEXT);"); // 6: lastMessageAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONVERSATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Conversation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String conversationId = entity.getConversationId();
        if (conversationId != null) {
            stmt.bindString(2, conversationId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String members = entity.getMembers();
        if (members != null) {
            stmt.bindString(4, members);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(5, creator);
        }
 
        String attributes = entity.getAttributes();
        if (attributes != null) {
            stmt.bindString(6, attributes);
        }
 
        String lastMessageAt = entity.getLastMessageAt();
        if (lastMessageAt != null) {
            stmt.bindString(7, lastMessageAt);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Conversation readEntity(Cursor cursor, int offset) {
        Conversation entity = new Conversation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // conversationId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // members
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // creator
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // attributes
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // lastMessageAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Conversation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setConversationId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMembers(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreator(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAttributes(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLastMessageAt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Conversation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Conversation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
