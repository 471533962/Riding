package com.bingo.riding.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.bingo.riding.dao.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER.
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", true, "OBJECT_ID");
        public final static Property UserPhoto = new Property(1, String.class, "userPhoto", false, "USER_PHOTO");
        public final static Property NikeName = new Property(2, String.class, "nikeName", false, "NIKE_NAME");
        public final static Property IsMale = new Property(3, Boolean.class, "isMale", false, "IS_MALE");
        public final static Property Message = new Property(4, String.class, "message", false, "MESSAGE");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER' (" + //
                "'OBJECT_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: objectId
                "'USER_PHOTO' TEXT," + // 1: userPhoto
                "'NIKE_NAME' TEXT," + // 2: nikeName
                "'IS_MALE' INTEGER," + // 3: isMale
                "'MESSAGE' TEXT);"); // 4: message
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        String userPhoto = entity.getUserPhoto();
        if (userPhoto != null) {
            stmt.bindString(2, userPhoto);
        }
 
        String nikeName = entity.getNikeName();
        if (nikeName != null) {
            stmt.bindString(3, nikeName);
        }
 
        Boolean isMale = entity.getIsMale();
        if (isMale != null) {
            stmt.bindLong(4, isMale ? 1l: 0l);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(5, message);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userPhoto
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nikeName
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // isMale
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // message
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserPhoto(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNikeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsMale(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setMessage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getObjectId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getObjectId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
